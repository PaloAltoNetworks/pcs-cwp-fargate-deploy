name: Fargate Deploy with PCC Defender

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  fargate:
    runs-on: ubuntu-latest
    environment: Testing
    permissions:
      id-token: write
      contents: read
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS Credentials region audience
      uses: aws-actions/configure-aws-credentials@v4
      with:
        audience: sts.amazonaws.com
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE }}

    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image and CI Scanning
      run: |
        # Build docker image
        docker build -t ${{ secrets.IMAGE_NAME }}:latest .

        # Generate Console token
        token=$(curl -s -k ${{ secrets.PCC_URL }}/api/v1/authenticate -H "Content-Type: application/json" --data '{
          "username":"${{ secrets.PCC_USER }}",
          "password":"${{ secrets.PCC_PASS }}"
          }'  | grep -Po '"'"token"'"\s*:\s*"\K([^"]*)')
        
        # Download Twistcli
        echo "Downloading twistcli binary"
        curl -s -O ${{ secrets.PCC_URL }}/api/v1/util/twistcli -H "Authorization: Bearer $token"
        chmod a+x twistcli
        ./twistcli --version

        # Perform CI Scan
        echo "Performing Vulnerability and Compliance Scanning"
        ./twistcli images scan --address ${{ secrets.PCC_URL }} --token $token --details ${{ secrets.IMAGE_NAME }}:latest

        # Perform Analysis Sandbox
        echo "Performing Image Analysis Sandbox"
        sudo ./twistcli sandbox --address ${{ secrets.PCC_URL }} --token $token --analysis-duration 2m ${{ secrets.IMAGE_NAME }}:latest

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.AWS_ECR_REGISTRY }}
        username: AWS
        password: ${{ secrets.AWS_ACCESS_TOKEN }}
        
    - name: Push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.IMAGE_NAME }}:latest,${{ secrets.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}

    - name: Generate Protected Fargate Task
      env:
        IMAGE_NAME: ${{ secrets.IMAGE_NAME }}:latest
        TASK_DEFINTION_NAME: ${{ vars.TASK_DEFINTION_NAME }}
        TASK_EXECUTION_ROLE: ${{ secrets.TASK_EXECUTION_ROLE }}
        APP_NAME: ${{ vars.APP_NAME }}
      run: |
        # Generate Fargate Task using template
        envsubst < fargate-task-template.json > fargate-task.json

        # Initial Path
        PCC_SAN="$(echo ${{ secrets.PCC_URL }} | awk -F[/:] '{print $4}')"
        path="/api/v1/defenders/fargate.json?consoleaddr=$PCC_SAN"
        
        # Identify if required to extract entrypoint
        entrypoint=$(cat fargate-task-template.json | jq -r ".containerDefinitions[].entryPoint")
        extract_entrypoint="false"
        if [ "$entrypoint" == null ]
        then
          extract_entrypoint="true"
          IFS="." read -r -a image_data <<< "${{ secrets.AWS_ECR_REGISTRY }}"
          credential_id="${image_data[0]}"
          path="$path&registryType=aws&registryCredentialID=$credential_id"
        fi

        path="$path&extractEntrypoint=$extract_entrypoint"

        # Generate Console token
        token=$(curl -s -k ${{ secrets.PCC_URL }}/api/v1/authenticate -H "Content-Type: application/json" --data '{
          "username":"${{ secrets.PCC_USER }}",
          "password":"${{ secrets.PCC_PASS }}"
          }'  | grep -Po '"'"token"'"\s*:\s*"\K([^"]*)')

        # Generate Protected Task
        curl -H "Content-Type: application/json" -H "Authorization: Bearer $token" --data "@fargate-task.json" -o protected-fargate-task.json "${{ secrets.PCC_URL }}$path"

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: protected-fargate-task.json
        service: ${{ vars.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true